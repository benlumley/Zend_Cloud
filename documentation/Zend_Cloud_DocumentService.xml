<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.cloud.documentservice">
    <title>Introduction</title>

    <para>
    	The DocumentService set of classes implements an abstraction to
    	access the document storage services in the cloud. The API
 		supports most document services and provides some flexibility for
 		vendor-specific features and requirements via an optional $options array in
 		each method signature. 
    </para>

	<para>
	The interface <classname>Zend_Cloud_DocumentService_DocumentService</classname> defines
	the methods which each concrete document service provider implements. So far, the following 
	providers are supported: 
	</para>
	
	<itemizedlist>
        <listitem>
            <para><classname>Zend_Cloud_DocumentService_Adapter_SimpleDB</classname> - 
            implements <ulink url="http://docs.amazonwebservices.com/AmazonSimpleDB/2009-04-15/DeveloperGuide/">Amazon 
            SimpleDB</ulink> access. 
			</para>
		</listitem>
        <listitem>
            <para><classname>Zend_Cloud_DocumentService_Adapter_WindowsAzure</classname> - 
            implements <ulink url="http://msdn.microsoft.com/en-us/library/dd179423.aspx">Windows Azure
            Table storage</ulink> access. 
			</para>
		</listitem>
	</itemizedlist>
	
	<para>In order to create the service object, 
	use the static method method <methodname>Zend_Cloud_DocumentService_Factory::getAdapter()</methodname>, 
	which accepts either array or <classname>Zend_Config</classname> object. 
	The key named <property>document_adapter</property> should specify the concrete adapter class, 
	and the rest of parameters are adapter-specific configurations, usually access details: 
	</para>
	
    <example id="zend.cloud.documentservice.factory.example">
      <title>Using DocumentService Factory</title>
      <programlisting language="php"><![CDATA[
$documents = Zend_Cloud_DocumentService_Factory::getAdapter(array(
	Zend_Cloud_DocumentService_Factory::DOCUMENT_ADAPTER_KEY => 'Zend_Cloud_DocumentService_Adapter_SimpleDB',
	Zend_Cloud_DocumentService_Adapter_SimpleDB::AWS_ACCESS_KEY => $amazonKey,
	Zend_Cloud_DocumentService_Adapter_SimpleDB::AWS_SECRET_KEY => $amazonSecret
));
]]></programlisting>
	</example>

	<para>
	Service-specific options for constructing the objects are: @TODO@
	</para>

    <sect2 id="zend.cloud.documentservice.concepts">
        <title>Basic concepts</title>
        <para>Different cloud document storage services use different terminology to refer to document storage concepts, 
        so the SimpleCloud API defines a number of common concepts that are shared among providers.
        </para>
        <para>The document storage consists of a number of <emphasis>collections</emphasis>, which are big logical storage
        units akin to database tables in the SQL world. Collections contain <emphasis>documents</emphasis>, which 
        are considered to be a set of key-value pairs and are identified by an unique <emphasis>document key</emphasis>
        or <emphasis>document ID</emphasis>.
        </para>
        <para>Each document has its own structure (set of fields) that does not have to match the structure of any
        other document, even in the same collection. 
        </para>
        <para>Documents can be retrieved either by referring to them by ID or by querying the collection for documents
        satisfying a particular condition.
        </para>
        <para>
        The documents are represented by the class <classname>Zend_Cloud_DocumentService_Document</classname>. 
        Note that the document class does not verify the supplied IDs and data, and does not ensure they are
        compatible with each concrete service's requirements. 
        </para> 
		<para>
		The document fields can be accessed using keys as object properties and also using the 
		<classname>ArrayAccess</classname> pattern - as array elements.
		</para>
    	<example id="zend.cloud.documentservice.document.create.example">
      		<title>Creating a document</title>
		    <programlisting language="php"><![CDATA[
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$document->otherkey = "some more data";
echo "key 1: ".$document->key1."\n";
echo "key 2: ".$document["key2"]."\n";
]]></programlisting>
		</example>
    	<example id="zend.cloud.documentservice.document.explore.example">
      		<title>Exploring the document data</title>
		    <programlisting language="php"><![CDATA[
$document = $documents->fetchDocument("mydata", $id);
echo "Document ID: ".$document->getID()."\n";
foreach($document->getFields() as $key => $value) {
	echo "Field $key is $value\n";
}  		    
]]></programlisting>
		</example>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.exceptions">
        <title>Exceptions</title>
        <para>
        If some error happens inside the document service, <classname>Zend_Cloud_DocumentService_Exception</classname>
        is thrown. If the exception was caused by underlying service driver, you can use <methodname>getClientException()</methodname>
        method to retrieve the original exception. 
        </para>
        <para>Since different cloud providers implement different sets of services, it might happen that 
        some concrete driver does not implement some method or functionality. In this case, the 
        <classname>Zend_Cloud_OperationNotAvailableException</classname> exception is thrown.
        </para>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.create-collection">
        <title>Creating a collection</title>
        <para>
        A new collection is created by using <methodname>createCollection()</methodname>:
        </para>
    	<example id="zend.cloud.documentservice.create-collection.example">
      		<title>Creating collection</title>
		    <programlisting language="php"><![CDATA[
$documents->createCollection("mydata");
]]></programlisting>
		</example>
        <para>
        Creating a collection which already exists is fine.
        </para>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.delete-collection">
        <title>Deleting a collection</title>
        <para>
        A collection is deleted by calling <methodname>deleteCollection()</methodname>:
        </para>
    	<example id="zend.cloud.documentservice.delete-collection.example">
      		<title>Deleting collection</title>
		    <programlisting language="php"><![CDATA[
$documents->deleteCollection("mydata");
]]></programlisting>
		</example>
        <para>Deleting a collection automatically deletes all the documents inside. Note that deleting a collection can take 
        significant time on some services and during that time you will not be able to re-create a collection with the same name.
        Deleting a non-existing collection name is fine.
        </para>
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.list-collections">
        <title>Listing available collections</title>
        <para>
        List of existing collections for the user is returned by <methodname>listCollections()</methodname>.
        The method returns array of collection names.
        </para>
        
    	<example id="zend.cloud.documentservice.list-collections.example">
      		<title>List collections</title>
		    <programlisting language="php"><![CDATA[
$list = $documents->listCollections();
foreach($list as $collection) {
	echo "My collection: $collection\n";
}
]]></programlisting>
		</example>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.insert">
        <title>Inserting a document</title>
        <para>
        In order to create a document, you need to provide a <classname>Zend_Cloud_DocumentService_Document</classname>
        object or array of data that contains the key at adapter-specific locations (for Azure, PartitionKey and RowKey,
        for Amazon SimpleDB - ItemName).  
        </para>
    	<example id="zend.cloud.documentservice.insert.example">
      		<title>Inserting document</title>
		    <programlisting language="php"><![CDATA[
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$documents->insertDocument("mydata", $document);		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.replace">
        <title>Replacing a document</title>
        <para>Replacing a document means removing all document data associated with certain document key
        and substituting new set of data instead. Unlike updating, this operation does not merge old and
        new data but replaces the document as a whole. The replace operation, like the insert operation,
        accepts a <classname>Zend_Cloud_DocumentService_Document</classname> document or an array of data
        fields. 
        </para>
    	<example id="zend.cloud.documentservice.replace.example">
      		<title>Replacing document</title>
		    <programlisting language="php"><![CDATA[
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$documents->replaceDocument("mydata", $document);		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.update">
        <title>Updating a document</title>
        <para>Updating document changes the key/value pairs in an existing document. Unlike replacing,
        this operation will not change the values of the keys that are not specified in the data set.
        The operation receives document key and data, which can be a 
        <classname>Zend_Cloud_DocumentService_Document</classname> document or an array. If the key is null
        and the document object is provided, the document key is used instead.
        </para>
    	<example id="zend.cloud.documentservice.update.example">
      		<title>Updating document</title>
		    <programlisting language="php"><![CDATA[
// update one field
$documents->updateDocument("mydata", "DocumentID", array("key2" => "new value"));
// or with document		    
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$documents->updateDocument("mydata", null, $document);
// copy document to another ID
$documents->updateDocument("mydata", "AnotherDocumentID", $document);
]]></programlisting>
		</example>		    
		<para>
		Amazon SimpleDB supports multi-values keys, so updating data can be merged with old key value
		instead of replacing them. Option <property>merge</property> should contain array of filed names 
		to be merged.
		</para>
    	<example id="zend.cloud.documentservice.update.merge.example">
      		<title>Merging document fields</title>
		    <programlisting language="php"><![CDATA[
// key2 is overwritten, key3 is merged
$documents->updateDocument("mydata", "DocumentID", 
	array("key2" => "new value", "key3" => "additional value"), 
	array("merge" => array("key3" => true))
);
]]></programlisting>
		</example>
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.delete">
        <title>Deleting a document</title>
        <para>A document can be deleted by passing its key to the <methodname>deleteDocument()</methodname>.
        Deleting a non-existing document is fine.
        </para>
    	<example id="zend.cloud.documentservice.delete.example">
      		<title>Deleting document</title>
		    <programlisting language="php"><![CDATA[
$documents->deleteDocument("mydata", "DocumentID");		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.fetch">
        <title>Fetching a document</title>
        <para>You can fetch a specific document by specifying its key. 
        </para>
    	<example id="zend.cloud.documentservice.fetch.example">
      		<title>Fetching collection</title>
		    <programlisting language="php"><![CDATA[
$document = $documents->fetchDocument("mydata", "DocumentID");
echo "Document ID: ".$document->getID()."\n";
foreach($document->getFields() as $key => $value) {
	echo "Field $key is $value\n";
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.query">
        <title>Querying a collection</title>
        <para>
        In order to find a number of document in the collection by some criteria, use the <methodname>query()</methodname>
        method. This method accepts either a string which is adapter-dependent query and is passed as-is
        to the concrete adapter, or structured query object <classname>Zend_Cloud_DocumentService_Query</classname>.
        The return is an array of data sets (which may or may not be complete documents) representing the 
        data satisfying the query.
        </para>
    	<example id="zend.cloud.documentservice.query.example">
      		<title>Querying a collection with string query</title>
		    <programlisting language="php"><![CDATA[
$docs = $documents->query("mydata", "RowKey eq 'rowkey2' or RowKey eq 'rowkey2'");
foreach($docs as $doc) {
	echo "Found document with partition key: {$doc['PartitionKey']} and row key {$doc['RowKey']}\n";
}		    
]]></programlisting>
		</example>		    
    	<example id="zend.cloud.documentservice.query-struct.example">
      		<title>Querying a collection with structured query</title>
		    <programlisting language="php"><![CDATA[
$query = new Zend_Cloud_DocumentService_Query();
$query->from("mydata")->where("year > ?", array(1945))->limit(3);
$docs = $documents->query("mydata", $query);
foreach($docs as $doc) {
	echo "Found document with partition key: {$doc['PartitionKey']} and row key {$doc['RowKey']}\n";
}		    
]]></programlisting>
		</example>		    
		<para>
		The <classname>Zend_Cloud_DocumentService_Query</classname> class does not limit which query clauses
		can be used, but the clause should be supported by the underlying concrete adapter. Currently supported clauses 
		are:
		</para>
		<itemizedlist>
    	    <listitem>
        	    <para><methodname>select()</methodname> - defines which fields are returned in the result. 
        	    Windows Azure ignores this clause's argument and always returns the whole document.
				</para>
			</listitem> 
    	    <listitem>
        	    <para><methodname>from()</methodname> - defines the collection name used in the query.
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>where()</methodname> - defines the conditions of the query. Accepts three parameters: 
        	    condition, array of arguments to replace ? fields in the condition and conjunction argument that
        	    should be 'and' or 'or' and is used to join this condition with previous conditions. Multiple
        	    <methodname>where()</methodname> can be specified.
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>whereid()</methodname> - defines the condition by document ID (key). The document 
        	    matching must have the same key. The method accepts one argument - the required ID (key).
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>limit()</methodname> - limits the returned data to specified number of documents.
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>order()</methodname> - sorts the returned data by specified field. Accepts two
        	    arguments - first is the field name and second is 'asc' or 'desc' specifying the sort direction.
        	    This clause is not currently supported by Windows Azure.
				</para>
			</listitem>
		</itemizedlist>
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.select">
        <title>Creating a query</title>
        <para>For the user's convenience, the <methodname>select()</methodname> method creates a query
        object and sets the SELECT clause for it.
        </para>
    	<example id="zend.cloud.documentservice.select.example">
      		<title>Creating structured query</title>
		    <programlisting language="php"><![CDATA[
$query = $documents->select()->from("mydata")->where("year > ?", array(1945))->limit(3);
$docs = $documents->query("mydata", $query);
foreach($docs as $doc) {
	echo "Found document with partition key: {$doc['PartitionKey']} and row key {$doc['RowKey']}\n";
}		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.adapter">
        <title>Accessing concrete adapter</title>
        <para>Sometimes it is necessary to retrieve the concrete adapter for the service that Document API
        is working with. This can be achieved by using <methodname>getAdapter()</methodname> method. Note that
        accessing the adapter directly leads to a non-portable code, so it should be reserved for exceptional
        circumstances only.
        </para>
    	<example id="zend.cloud.documentservice.adapter.example">
      		<title>Using concrete adapter</title>
		    <programlisting language="php"><![CDATA[
// since SimpleCloud Document API doesn't support batch upload, use concrete adapter 
$amazonSdb = $documents->getAdapter();
$amazonSdb->batchPutAttributes($items, "mydata");
]]></programlisting>
		</example>
	</sect2>
</sect1>
