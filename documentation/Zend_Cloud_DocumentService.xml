<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<sect1 id="zend.cloud.documentservice">
    <title>Document Service Introduction</title>

    <para>
    	Zend_Cloud_DocumentService abstracts the interfaces to all major
    	document databases- both in the cloud and locally deployed- so
    	developers can access their common functionality through one API. In
    	other words, an application can make use of these databases and services
    	with no concern over how the application will be deployed. The data
    	source can be chosen through configuration changes alone at the time
    	of deployment.
	</para>
	<para>
    	Document databases and services have become more common in application
    	development. These data sources are somewhat different from traditional
    	relational data sources. They eschew complex relationships for
    	performance, scalability, and flexibility. Examples of document-oriented
    	services SimpleDB and Azure Table Storage.
   	</para>
   	<para>
   		The Simple Cloud API offers some flexibility for vendor-specific
   		features with an <code>$options</code> array in each method signature.
   		Some adapters require certain options that also must be added to the
   		<code>$options</code> array. It is a good practice to retrieve these
   		options from a configuration file to maintain compatibility with all
   		services and databases.
   	</para>
   	<para>
   		If more vendor-specific requirements are required, the developer should
    	extend the Zend_Cloud_DocumentService_DocumentService_DocumentService adapter to add support for these
    	features. In this manner, vendor-specific features can be called out in
    	the application by refering to the Simple Cloud API extensions in the
    	subclass of the Simple Cloud adapter.
    </para>

	<title>Zend_Cloud_DocumentService_DocumentService_DocumentService Interface</title>
	<para>
	The <classname>Zend_Cloud_DocumentService_DocumentService</classname>
	interface defines methods that each concrete document service adapter 
	implements. The following adapters are shipped with the Simple
	Cloud API: 
	</para>
	
	<itemizedlist>
        <listitem>
            <ulink url="http://aws.amazon.com/simpledb/">
            <classname>Zend_Cloud_DocumentService_Adapter_SimpleDB</classname>
            </ulink>
		</listitem>
        <listitem>
            <ulink url="http://msdn.microsoft.com/en-us/library/dd179423.aspx">
            <classname>Zend_Cloud_DocumentService_Adapter_WindowsAzure</classname> 
            </ulink>
		</listitem>
	</itemizedlist>
	
	<para>To instantiate a document service adapter, use the static method
	<methodname>Zend_Cloud_DocumentService_Factory::getAdapter()</methodname>, 
	which accepts a configuration array ora  <classname>Zend_Config</classname>
	object. The <property>document_adapter</property> key should specify the
	concrete adapter class by classname. Adapter-specific keys may also be
	passed in this configuration parameter: 
	</para>
	
    <example id="zend.cloud.documentservice.factory.example">
      <programlisting language="php"><![CDATA[
    $adapterClass = 'Zend_Cloud_DocumentService_Adapter_SimpleDB';
	$documents = Zend_Cloud_DocumentService_Factory::getAdapter(array(
	Zend_Cloud_DocumentService_Factory::DOCUMENT_ADAPTER_KEY => $adapterClass,
	Zend_Cloud_DocumentService_Adapter_SimpleDB::AWS_ACCESS_KEY => $amazonKey,
	Zend_Cloud_DocumentService_Adapter_SimpleDB::AWS_SECRET_KEY => $amazonSecret
));
]]></programlisting>
	</example>

	
	<para>
	The supported adapter-specific options include: 
	</para>
	
	<table frame='all' id="zend.cloud.documentservice.options.sdb">
	<title>Zend_Cloud_DocumentService_Adapter_SimpleDB Options</title>
	<tgroup cols="4">
	<thead>
	<row>
		<entry>Option key</entry>
		<entry>Description</entry>
		<entry>Used in</entry>
		<entry>Required</entry>
		<entry>Default</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry>aws_accesskey</entry>
		<entry>Your Amazon AWS access key</entry>
		<entry>Constructor</entry>
		<entry>Yes</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>aws_secretkey</entry>
		<entry>Your Amazon AWS secret key</entry>
		<entry>Constructor</entry>
		<entry>Yes</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>http_adapter</entry>
		<entry>HTTP adapter to use in all access operations</entry>
		<entry>Constructor</entry>
		<entry>No</entry>
		<entry>Zend_Http_Client_Adapter_Socket</entry>
	</row>
	<row>
		<entry>merge</entry>
		<entry>If true, all attribute values are merged.
		If array, those attributes used as keys for which the value is true
		are merged. The rest of attributes are replaced.
		</entry>
		<entry><methodname>updateDocument()</methodname></entry>
		<entry>No</entry>
		<entry>true</entry>
	</row>
	<row>
		<entry>return_documents</entry>
		<entry>If true, <methodname>query()</methodname> returns array of
		document objects, otherwise array of arrays.</entry>
		<entry><methodname>query()</methodname></entry>
		<entry>No</entry>
		<entry>true</entry>
	</row>
	</tbody>
	</tgroup>
	</table>	

	<table frame='all' id="zend.cloud.documentservice.options.azure">
	<title>Zend_Cloud_DocumentService_Adapter_WindowsAzure Options</title>
	<tgroup cols="4">
	<thead>
	<row>
		<entry>Option key</entry>
		<entry>Description</entry>
		<entry>Used in</entry>
		<entry>Required</entry>
		<entry>Default</entry>
	</row>
	</thead>
	<tbody>
	<row>
		<entry>storage_accountname</entry>
		<entry>Windows Azure account name</entry>
		<entry>Constructor</entry>
		<entry>yes</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>storage_accountkey</entry>
		<entry>Windows Azure account key</entry>
		<entry>Constructor</entry>
		<entry>yes</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>storage_host</entry>
		<entry>Windows Azure access host, default is table.core.windows.net</entry>
		<entry>Constructor</entry>
		<entry>no</entry>
		<entry>table.core.windows.net</entry>
	</row>
	<row>
		<entry>storage_proxy_host</entry>
		<entry>Proxy hostname</entry>
		<entry>Constructor</entry>
		<entry>no</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>storage_proxy_port</entry>
		<entry>Proxy port</entry>
		<entry>Constructor</entry>
		<entry>no</entry>
		<entry>8080</entry>
	</row>
	<row>
		<entry>storage_proxy_credentials</entry>
		<entry>Proxy credentials</entry>
		<entry>Constructor</entry>
		<entry>no</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>HTTP Adapter</entry>
		<entry>HTTP adapter to use in all access operations</entry>
		<entry>Constructor</entry>
		<entry>no</entry>
		<entry>None</entry>
	</row>
	<row>
		<entry>verify_etag</entry>
		<entry>Verify ETag on the target document and perform the operation only
		if the ETag matches the expected value</entry>
		<entry>
			<methodname>updateDocument()</methodname>
			<methodname>replaceDocument()</methodname>
			<methodname>deleteDocument()</methodname>
		</entry>
		<entry>no</entry>
		<entry>false</entry>
	</row>
	</tbody>
	</tgroup>
	</table>

	<note><para>It is a best practice to use class constants defined in the
	adapters as option keys; avoid using the actual constant value,
	since it may be subject to change in future versions of the API.</para>
	</note>

    <sect2 id="zend.cloud.documentservice.concepts">
        <title>Basic concepts</title>
        <para>Each document-oriented service and database uses its own
        terminology and constructs in its API. The SimpleCloud API identifies
        and abstracts a number of common concepts and operations that are shared
        among providers.
        </para>
        <para>Document storage consists of a number of
        <emphasis>collections</emphasis>, which are logical storage units
        analogous to database tables in the SQL world. Collections contain
        <emphasis>documents</emphasis>, which are essentially a set of key-value
        pairs, along with some metadata specific to the storage engine, and are
        identified by a unique <emphasis>document ID</emphasis>.
        </para>
        <para>Each document has its own structure (set of fields) that does not
        necessarily have to match the structure of any other document, even in
        the same collection. In fact, you can change this structure after the
        document is created.
        </para>
        <para>Documents can be retrieved by ID or by querying a collection.
        </para>
        <para>
        Documents are represented by the class
        <classname>Zend_Cloud_DocumentService_Document</classname>. 
        Note that the document class does not validate the supplied IDs and data,
        and does not enforce compatibility with each adapters requirements.
        </para> 
		<para>
		The document fields can be accessed using keys as object properties and
		as array elements.
		</para>
    	<example id="zend.cloud.documentservice.document.create.example">
      		<title>Creating a document</title>
		    <programlisting language="php"><![CDATA[
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$document->otherkey = "some more data";
echo "key 1: ".$document->key1."\n";
echo "key 2: ".$document["key2"]."\n";
]]></programlisting>
		</example>
    	<example id="zend.cloud.documentservice.document.explore.example">
      		<title>Exploring the document data</title>
		    <programlisting language="php"><![CDATA[
$document = $documents->fetchDocument("mydata", $id);
echo "Document ID: ".$document->getID()."\n";
foreach($document->getFields() as $key => $value) {
	echo "Field $key is $value\n";
}  		    
]]></programlisting>
		</example>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.exceptions">
        <title>Exceptions</title>
        <para>
        If some error occurs in the document service,
        <classname>Zend_Cloud_DocumentService_Exception</classname> is thrown.
        If the exception was caused by underlying service driver, you can use
        <methodname>getClientException()</methodname> method to retrieve the
        original exception. 
        </para>
        <para>Since different cloud providers implement different sets of
        services, some drivers do not implement certain features. In this case,
        the <classname>Zend_Cloud_OperationNotAvailableException</classname>
        exception is thrown.
        </para>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.create-collection">
        <title>Creating a collection</title>
        <para>
        A new collection is created using <methodname>createCollection()</methodname>:
        </para>
    	<example id="zend.cloud.documentservice.create-collection.example">
      		<title>Creating collection</title>
		    <programlisting language="php"><![CDATA[
$documents->createCollection("mydata");
]]></programlisting>
		</example>
        <para>
        If you call <methodname>create()</methodname> with a collection name
        that already exists, the service will do nothing and leave the existing
        collection untouched.
        </para>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.delete-collection">
        <title>Deleting a collection</title>
        <para>
        A collection is deleted by calling
        <methodname>deleteCollection()</methodname>:
        </para>
    	<example id="zend.cloud.documentservice.delete-collection.example">
      		<title>Deleting collection</title>
		    <programlisting language="php"><![CDATA[
$documents->deleteCollection("mydata");
]]></programlisting>
		</example>
        <para>Deleting a collection automatically deletes all documents
        contained in that collection.
        </para>
        <note>Deleting a collection can take significant time for some services
        You cannot re-create a collection with the same name until the
        collection is removed.
        </note>
        <para>
        Deleting a non-existant collection will have no effect.
        </para>
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.list-collections">
        <title>Listing available collections</title>
        <para>
        A list of existing collections is returned by
        <methodname>listCollections()</methodname>.
        This method returns an array of all the names of collections belonging
        to the account you specified when you created the adapter.
        </para>
        
    	<example id="zend.cloud.documentservice.list-collections.example">
      		<title>List collections</title>
		    <programlisting language="php"><![CDATA[
$list = $documents->listCollections();
foreach($list as $collection) {
	echo "My collection: $collection\n";
}
]]></programlisting>
		</example>
	</sect2>
	
    <sect2 id="zend.cloud.documentservice.insert">
        <title>Inserting a document</title>
        <para>
        To insert a document, you need to provide a
        <classname>Zend_Cloud_DocumentService_Document</classname>
        object or array of data that contains the key under adapter-specific
        locations. For Azure the ID is made up of the PartitionKey and RowKey.
        For Amazon SimpleDB, the ID is the ItemName).  
        </para>
    	<example id="zend.cloud.documentservice.insert.example">
      		<title>Inserting document</title>
		    <programlisting language="php"><![CDATA[
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$documents->insertDocument("mydata", $document);		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.replace">
        <title>Replacing a document</title>
        <para>Replacing a document means removing all document data associated
        with a particular document key and substituting it with a new set of
        data. Unlike <methodname>updating</methodname>, this operation does not
        merge old and new data but replaces the document as a whole. The replace
        operation, like <methodname>insertDocument()</methodname>,
        accepts a <classname>Zend_Cloud_DocumentService_Document</classname>
        document or an array of key-value pairs that specify names and values of
        the new fields. 
        </para>
    	<example id="zend.cloud.documentservice.replace.example">
      		<title>Replacing document</title>
		    <programlisting language="php"><![CDATA[
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$documents->replaceDocument("mydata", $document);		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.update">
        <title>Updating a document</title>
        <para>Updating document changes the key/value pairs in an existing
        document. This operation does not share the replace semantics; the
        values of the keys that are not specified in the data set will not be
        changed. You must provide document key and data, which can be a 
        <classname>Zend_Cloud_DocumentService_Document</classname> document or
        an array, to this method. If the key is null and a document object is
        provided, the document key is used.
        </para>
    	<example id="zend.cloud.documentservice.update.example">
      		<title>Updating document</title>
		    <programlisting language="php"><![CDATA[
// update one field
$documents->updateDocument("mydata", "DocumentID", array("key2" => "new value"));

// or with document		    
$document = new Zend_Cloud_DocumentService_Document("DocumentID", array(
	"key1" => "value1",
	"key2" => 123,
	"key3" => "thirdvalue"
	));
$documents->updateDocument("mydata", null, $document);

// copy document to another ID
$documents->updateDocument("mydata", "AnotherDocumentID", $document);
]]></programlisting>
		</example>		    
		<para>
		Amazon SimpleDB supports multi-value fields, so data updates will be
		merged with old key value instead of replacing them. Option
		<property>merge</property> should contain array of filed names 
		to be merged.
		</para>
    	<example id="zend.cloud.documentservice.update.merge.example">
      		<title>Merging document fields</title>
		    <programlisting language="php"><![CDATA[
// key2 is overwritten, key3 is merged
$documents->updateDocument("mydata", "DocumentID", 
	array("key2" => "new value", "key3" => "additional value"), 
	array("merge" => array("key3" => true))
);
]]></programlisting>
		</example>
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.delete">
        <title>Deleting a document</title>
        <para>A document can be deleted by passing its key to the <methodname>deleteDocument()</methodname>.
        Deleting a non-existing document has no effect.
        </para>
    	<example id="zend.cloud.documentservice.delete.example">
      		<title>Deleting document</title>
		    <programlisting language="php"><![CDATA[
$documents->deleteDocument("collectionName", "DocumentID");		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.fetch">
        <title>Fetching a document</title>
        <para>You can fetch a specific document by specifying its key.
        	<methodname>fetchDocument()</methodname> returns one instance of
        	<classname>Zend_Cloud_DocumentService_Document</classname>.
        </para>
    	<example id="zend.cloud.documentservice.fetch.example">
      		<title>Fetching collection</title>
		    <programlisting language="php"><![CDATA[
$document = $service->fetchDocument("collectionName", "DocumentID");
echo "Document ID: ".$document->getID()."\n";
foreach($document->getFields() as $key => $value) {
	echo "Field $key is $value\n";
}
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.query">
        <title>Querying a collection</title>
        <para>
        To find documents in the collection that meet some criteria, use the
        <methodname>query()</methodname>method. This method accepts either a
        string which is adapter-dependent query and is passed as-is
        to the concrete adapter, or structured query object
        <classname>Zend_Cloud_DocumentService_Query</classname>.
        The return is an array of arrays of fields (which may or may not be
        complete documents) indexed by the document ID. This array represents
        all fields that satisfy the query.
        </para>
    	<example id="zend.cloud.documentservice.query.example">
      		<title>Querying a collection with string query</title>
		    <programlisting language="php"><![CDATA[
$docs = $documents->query("collectionName", "RowKey eq 'rowkey2' or RowKey eq 'rowkey2'");
foreach($docs as $doc) {
	echo "Found document with partition key: {$doc['PartitionKey']} and row key {$doc['RowKey']}\n";
}		    
]]></programlisting>
		</example>		    
    	<example id="zend.cloud.documentservice.query-struct.example">
      		<title>Querying a collection with structured query</title>
		    <programlisting language="php"><![CDATA[
$query = new Zend_Cloud_DocumentService_Query();
$query->from("collectionName")->where("year > ?", array(1945))->limit(3);
$docs = $documents->query("collectionName", $query);
foreach($docs as $doc) {
	echo "Found document with partition key: {$doc['PartitionKey']} and row key {$doc['RowKey']}\n";
}		    
]]></programlisting>
		</example>		    
		<para>
		The <classname>Zend_Cloud_DocumentService_Query</classname> class does
		not limit which query clauses can be used, but the clause must be
		supported by the underlying concrete adapter. Currently supported the
		clauses are:
		</para>
		<itemizedlist>
    	    <listitem>
        	    <para><methodname>select()</methodname> - defines which fields
        	    are returned in the result. 
        	    <note>Windows Azure ignores this clause's argument and always
        	    returns the whole document.</note>
				</para>
			</listitem> 
    	    <listitem>
        	    <para><methodname>from()</methodname> - defines the collection
        	    name used in the query.
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>where()</methodname> - defines the conditions
        	    of the query. It accepts three parameters: 
        	   	condition, array of arguments to replace ? fields in the
        	   	condition and conjunction argument that should be 'and' or 'or'
        	   	and is used to join this condition with previous conditions.
        	   	Multiple <methodname>where()</methodname> can be specified.
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>whereid()</methodname> - defines the condition
        	    by document ID (key). The document matching must have the same
        	    key. The method accepts one argument - the required ID (key).
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>limit()</methodname> - limits the returned
        	    data to specified number of documents.
				</para>
			</listitem>
    	    <listitem>
        	    <para><methodname>order()</methodname> - sorts the returned data
        	    by specified field. Accepts two arguments - first is the field
        	    name and second is 'asc' or 'desc' specifying the sort
        	    direction. <note>This clause is not currently supported by
        	    Windows Azure.</note>
				</para>
			</listitem>
		</itemizedlist>
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.select">
        <title>Creating a query</title>
        <para>For the user's convenience, the <methodname>select()</methodname>
        method instantiates a query object and sets the SELECT clause for it.
        </para>
    	<example id="zend.cloud.documentservice.select.example">
      		<title>Creating structured query</title>
		    <programlisting language="php"><![CDATA[
$query = $documents->select()->from("collectionName")->where("year > ?", array(1945))->limit(3);
$docs = $documents->query("collectionName", $query);
foreach($docs as $doc) {
	// TODO What is a row key
	echo "Found document with partition key: {$doc['PartitionKey']} and row key {$doc['RowKey']}\n";
}		    
]]></programlisting>
		</example>		    
	</sect2>
    
    <sect2 id="zend.cloud.documentservice.adapter">
        <title>Accessing concrete adapters</title>
        <para>Sometimes it is necessary to retrieve the concrete adapter for the
        service that the Document API is working with. This can be achieved by
        using the <methodname>getAdapter()</methodname> method.
        </para>
        <note>
        Accessing the underlying adapter breaks portability among services, so
        it should be reserved for exceptional circumstances only.
        </note>
    	<example id="zend.cloud.documentservice.adapter.example">
      		<title>Using concrete adapters</title>
		    <programlisting language="php"><![CDATA[
// since SimpleCloud Document API doesn't support batch upload, use concrete adapter 
$amazonSdb = $documents->getAdapter();
$amazonSdb->batchPutAttributes($items, "collectionName");
]]></programlisting>
		</example>
	</sect2>
</sect1>
